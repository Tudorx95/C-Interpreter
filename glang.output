Terminals unused in grammar

    RETURN
    SLINE_COMMENT
    OPEN_MLINE_COMMENT
    CLOSE_MLINE_COMMENT
    COMMA
    MODULO


Grammar

    0 $accept: program $end

    1 program: function

    2 function: function stmt
    3         | ε

    4 stmt: SEMICOLON
    5     | expr SEMICOLON
    6     | print_statement
    7     | scan_statement
    8     | declaration
    9     | assignment
   10     | while_statement
   11     | if_statement
   12     | block_stmt

   13 $@1: ε

   14 block_stmt: LBRACE $@1 stmt_list RBRACE

   15 stmt_list: stmt
   16          | stmt_list stmt

   17 scan_statement: SCAN expr SEMICOLON

   18 print_statement: PRINT expr SEMICOLON

   19 assignment: VAR ASSIGN expr SEMICOLON

   20 declaration: INT VAR ASSIGN expr SEMICOLON
   21            | FLOAT VAR ASSIGN expr SEMICOLON
   22            | DOUBLE VAR ASSIGN expr SEMICOLON
   23            | INT VAR SEMICOLON
   24            | FLOAT VAR SEMICOLON
   25            | DOUBLE VAR SEMICOLON

   26 while_statement: WHILE LPAREN expr RPAREN stmt

   27 if_statement: IF LPAREN expr RPAREN stmt
   28             | IF LPAREN expr RPAREN stmt ELSE stmt

   29 expr: INT_VAL
   30     | FLOAT_VAL
   31     | DOUBLE_VAL
   32     | VAR
   33     | MINUS expr
   34     | expr PLUS expr
   35     | expr MINUS expr
   36     | expr MULTIPLY expr
   37     | expr DIVIDE expr
   38     | expr LESS expr
   39     | expr GREATER expr
   40     | expr GREATEREQUAL expr
   41     | expr LESSEQUAL expr
   42     | expr NOTEQUAL expr
   43     | expr EQUAL expr
   44     | LPAREN INT RPAREN expr
   45     | LPAREN FLOAT RPAREN expr
   46     | LPAREN DOUBLE RPAREN expr
   47     | LPAREN expr RPAREN


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    VAR <sval> (258) 19 20 21 22 23 24 25 32
    INT_VAL <iVal> (259) 29
    FLOAT_VAL <fVal> (260) 30
    DOUBLE_VAL <dVal> (261) 31
    INT (262) 20 23 44
    FLOAT (263) 21 24 45
    DOUBLE (264) 22 25 46
    IF (265) 27 28
    WHILE (266) 26
    PRINT (267) 18
    SCAN (268) 17
    RETURN (269)
    SLINE_COMMENT (270)
    OPEN_MLINE_COMMENT (271)
    CLOSE_MLINE_COMMENT (272)
    LPAREN (273) 26 27 28 44 45 46 47
    RPAREN (274) 26 27 28 44 45 46 47
    LBRACE (275) 14
    RBRACE (276) 14
    COMMA (277)
    SEMICOLON (278) 4 5 17 18 19 20 21 22 23 24 25
    ASSIGN (279) 19 20 21 22
    MODULO (280)
    IFX (281)
    ELSE (282) 28
    PLUS (283) 34
    MINUS (284) 33 35
    MULTIPLY (285) 36
    DIVIDE (286) 37
    EQUAL (287) 43
    NOTEQUAL (288) 42
    LESSEQUAL (289) 41
    GREATEREQUAL (290) 40
    LESS (291) 38
    GREATER (292) 39
    UMINUS (293)


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    program (40)
        on left: 1
        on right: 0
    function (41)
        on left: 2 3
        on right: 1 2
    stmt <node> (42)
        on left: 4 5 6 7 8 9 10 11 12
        on right: 2 15 16 26 27 28
    block_stmt <node> (43)
        on left: 14
        on right: 12
    $@1 (44)
        on left: 13
        on right: 14
    stmt_list <node> (45)
        on left: 15 16
        on right: 14 16
    scan_statement <node> (46)
        on left: 17
        on right: 7
    print_statement <node> (47)
        on left: 18
        on right: 6
    assignment <node> (48)
        on left: 19
        on right: 9
    declaration <node> (49)
        on left: 20 21 22 23 24 25
        on right: 8
    while_statement <node> (50)
        on left: 26
        on right: 10
    if_statement <node> (51)
        on left: 27 28
        on right: 11
    expr <node> (52)
        on left: 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
        on right: 5 17 18 19 20 21 22 26 27 28 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47


State 0

    0 $accept: • program $end

    $default  reduce using rule 3 (function)

    program   go to state 1
    function  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: function •
    2 function: function • stmt

    VAR         shift, and go to state 4
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    INT         shift, and go to state 8
    FLOAT       shift, and go to state 9
    DOUBLE      shift, and go to state 10
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    PRINT       shift, and go to state 13
    SCAN        shift, and go to state 14
    LPAREN      shift, and go to state 15
    LBRACE      shift, and go to state 16
    SEMICOLON   shift, and go to state 17
    MINUS       shift, and go to state 18

    $default  reduce using rule 1 (program)

    stmt             go to state 19
    block_stmt       go to state 20
    scan_statement   go to state 21
    print_statement  go to state 22
    assignment       go to state 23
    declaration      go to state 24
    while_statement  go to state 25
    if_statement     go to state 26
    expr             go to state 27


State 3

    0 $accept: program $end •

    $default  accept


State 4

   19 assignment: VAR • ASSIGN expr SEMICOLON
   32 expr: VAR •

    ASSIGN  shift, and go to state 28

    $default  reduce using rule 32 (expr)


State 5

   29 expr: INT_VAL •

    $default  reduce using rule 29 (expr)


State 6

   30 expr: FLOAT_VAL •

    $default  reduce using rule 30 (expr)


State 7

   31 expr: DOUBLE_VAL •

    $default  reduce using rule 31 (expr)


State 8

   20 declaration: INT • VAR ASSIGN expr SEMICOLON
   23            | INT • VAR SEMICOLON

    VAR  shift, and go to state 29


State 9

   21 declaration: FLOAT • VAR ASSIGN expr SEMICOLON
   24            | FLOAT • VAR SEMICOLON

    VAR  shift, and go to state 30


State 10

   22 declaration: DOUBLE • VAR ASSIGN expr SEMICOLON
   25            | DOUBLE • VAR SEMICOLON

    VAR  shift, and go to state 31


State 11

   27 if_statement: IF • LPAREN expr RPAREN stmt
   28             | IF • LPAREN expr RPAREN stmt ELSE stmt

    LPAREN  shift, and go to state 32


State 12

   26 while_statement: WHILE • LPAREN expr RPAREN stmt

    LPAREN  shift, and go to state 33


State 13

   18 print_statement: PRINT • expr SEMICOLON

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 35


State 14

   17 scan_statement: SCAN • expr SEMICOLON

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 36


State 15

   44 expr: LPAREN • INT RPAREN expr
   45     | LPAREN • FLOAT RPAREN expr
   46     | LPAREN • DOUBLE RPAREN expr
   47     | LPAREN • expr RPAREN

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    INT         shift, and go to state 37
    FLOAT       shift, and go to state 38
    DOUBLE      shift, and go to state 39
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 40


State 16

   14 block_stmt: LBRACE • $@1 stmt_list RBRACE

    $default  reduce using rule 13 ($@1)

    $@1  go to state 41


State 17

    4 stmt: SEMICOLON •

    $default  reduce using rule 4 (stmt)


State 18

   33 expr: MINUS • expr

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 42


State 19

    2 function: function stmt •

    $default  reduce using rule 2 (function)


State 20

   12 stmt: block_stmt •

    $default  reduce using rule 12 (stmt)


State 21

    7 stmt: scan_statement •

    $default  reduce using rule 7 (stmt)


State 22

    6 stmt: print_statement •

    $default  reduce using rule 6 (stmt)


State 23

    9 stmt: assignment •

    $default  reduce using rule 9 (stmt)


State 24

    8 stmt: declaration •

    $default  reduce using rule 8 (stmt)


State 25

   10 stmt: while_statement •

    $default  reduce using rule 10 (stmt)


State 26

   11 stmt: if_statement •

    $default  reduce using rule 11 (stmt)


State 27

    5 stmt: expr • SEMICOLON
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    SEMICOLON     shift, and go to state 43
    PLUS          shift, and go to state 44
    MINUS         shift, and go to state 45
    MULTIPLY      shift, and go to state 46
    DIVIDE        shift, and go to state 47
    EQUAL         shift, and go to state 48
    NOTEQUAL      shift, and go to state 49
    LESSEQUAL     shift, and go to state 50
    GREATEREQUAL  shift, and go to state 51
    LESS          shift, and go to state 52
    GREATER       shift, and go to state 53


State 28

   19 assignment: VAR ASSIGN • expr SEMICOLON

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 54


State 29

   20 declaration: INT VAR • ASSIGN expr SEMICOLON
   23            | INT VAR • SEMICOLON

    SEMICOLON  shift, and go to state 55
    ASSIGN     shift, and go to state 56


State 30

   21 declaration: FLOAT VAR • ASSIGN expr SEMICOLON
   24            | FLOAT VAR • SEMICOLON

    SEMICOLON  shift, and go to state 57
    ASSIGN     shift, and go to state 58


State 31

   22 declaration: DOUBLE VAR • ASSIGN expr SEMICOLON
   25            | DOUBLE VAR • SEMICOLON

    SEMICOLON  shift, and go to state 59
    ASSIGN     shift, and go to state 60


State 32

   27 if_statement: IF LPAREN • expr RPAREN stmt
   28             | IF LPAREN • expr RPAREN stmt ELSE stmt

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 61


State 33

   26 while_statement: WHILE LPAREN • expr RPAREN stmt

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 62


State 34

   32 expr: VAR •

    $default  reduce using rule 32 (expr)


State 35

   18 print_statement: PRINT expr • SEMICOLON
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    SEMICOLON     shift, and go to state 63
    PLUS          shift, and go to state 44
    MINUS         shift, and go to state 45
    MULTIPLY      shift, and go to state 46
    DIVIDE        shift, and go to state 47
    EQUAL         shift, and go to state 48
    NOTEQUAL      shift, and go to state 49
    LESSEQUAL     shift, and go to state 50
    GREATEREQUAL  shift, and go to state 51
    LESS          shift, and go to state 52
    GREATER       shift, and go to state 53


State 36

   17 scan_statement: SCAN expr • SEMICOLON
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    SEMICOLON     shift, and go to state 64
    PLUS          shift, and go to state 44
    MINUS         shift, and go to state 45
    MULTIPLY      shift, and go to state 46
    DIVIDE        shift, and go to state 47
    EQUAL         shift, and go to state 48
    NOTEQUAL      shift, and go to state 49
    LESSEQUAL     shift, and go to state 50
    GREATEREQUAL  shift, and go to state 51
    LESS          shift, and go to state 52
    GREATER       shift, and go to state 53


State 37

   44 expr: LPAREN INT • RPAREN expr

    RPAREN  shift, and go to state 65


State 38

   45 expr: LPAREN FLOAT • RPAREN expr

    RPAREN  shift, and go to state 66


State 39

   46 expr: LPAREN DOUBLE • RPAREN expr

    RPAREN  shift, and go to state 67


State 40

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr
   47     | LPAREN expr • RPAREN

    RPAREN        shift, and go to state 68
    PLUS          shift, and go to state 44
    MINUS         shift, and go to state 45
    MULTIPLY      shift, and go to state 46
    DIVIDE        shift, and go to state 47
    EQUAL         shift, and go to state 48
    NOTEQUAL      shift, and go to state 49
    LESSEQUAL     shift, and go to state 50
    GREATEREQUAL  shift, and go to state 51
    LESS          shift, and go to state 52
    GREATER       shift, and go to state 53


State 41

   14 block_stmt: LBRACE $@1 • stmt_list RBRACE

    VAR         shift, and go to state 4
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    INT         shift, and go to state 8
    FLOAT       shift, and go to state 9
    DOUBLE      shift, and go to state 10
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    PRINT       shift, and go to state 13
    SCAN        shift, and go to state 14
    LPAREN      shift, and go to state 15
    LBRACE      shift, and go to state 16
    SEMICOLON   shift, and go to state 17
    MINUS       shift, and go to state 18

    stmt             go to state 69
    block_stmt       go to state 20
    stmt_list        go to state 70
    scan_statement   go to state 21
    print_statement  go to state 22
    assignment       go to state 23
    declaration      go to state 24
    while_statement  go to state 25
    if_statement     go to state 26
    expr             go to state 27


State 42

   33 expr: MINUS expr •
   34     | expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    $default  reduce using rule 33 (expr)


State 43

    5 stmt: expr SEMICOLON •

    $default  reduce using rule 5 (stmt)


State 44

   34 expr: expr PLUS • expr

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 71


State 45

   35 expr: expr MINUS • expr

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 72


State 46

   36 expr: expr MULTIPLY • expr

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 73


State 47

   37 expr: expr DIVIDE • expr

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 74


State 48

   43 expr: expr EQUAL • expr

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 75


State 49

   42 expr: expr NOTEQUAL • expr

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 76


State 50

   41 expr: expr LESSEQUAL • expr

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 77


State 51

   40 expr: expr GREATEREQUAL • expr

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 78


State 52

   38 expr: expr LESS • expr

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 79


State 53

   39 expr: expr GREATER • expr

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 80


State 54

   19 assignment: VAR ASSIGN expr • SEMICOLON
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    SEMICOLON     shift, and go to state 81
    PLUS          shift, and go to state 44
    MINUS         shift, and go to state 45
    MULTIPLY      shift, and go to state 46
    DIVIDE        shift, and go to state 47
    EQUAL         shift, and go to state 48
    NOTEQUAL      shift, and go to state 49
    LESSEQUAL     shift, and go to state 50
    GREATEREQUAL  shift, and go to state 51
    LESS          shift, and go to state 52
    GREATER       shift, and go to state 53


State 55

   23 declaration: INT VAR SEMICOLON •

    $default  reduce using rule 23 (declaration)


State 56

   20 declaration: INT VAR ASSIGN • expr SEMICOLON

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 82


State 57

   24 declaration: FLOAT VAR SEMICOLON •

    $default  reduce using rule 24 (declaration)


State 58

   21 declaration: FLOAT VAR ASSIGN • expr SEMICOLON

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 83


State 59

   25 declaration: DOUBLE VAR SEMICOLON •

    $default  reduce using rule 25 (declaration)


State 60

   22 declaration: DOUBLE VAR ASSIGN • expr SEMICOLON

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 84


State 61

   27 if_statement: IF LPAREN expr • RPAREN stmt
   28             | IF LPAREN expr • RPAREN stmt ELSE stmt
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    RPAREN        shift, and go to state 85
    PLUS          shift, and go to state 44
    MINUS         shift, and go to state 45
    MULTIPLY      shift, and go to state 46
    DIVIDE        shift, and go to state 47
    EQUAL         shift, and go to state 48
    NOTEQUAL      shift, and go to state 49
    LESSEQUAL     shift, and go to state 50
    GREATEREQUAL  shift, and go to state 51
    LESS          shift, and go to state 52
    GREATER       shift, and go to state 53


State 62

   26 while_statement: WHILE LPAREN expr • RPAREN stmt
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    RPAREN        shift, and go to state 86
    PLUS          shift, and go to state 44
    MINUS         shift, and go to state 45
    MULTIPLY      shift, and go to state 46
    DIVIDE        shift, and go to state 47
    EQUAL         shift, and go to state 48
    NOTEQUAL      shift, and go to state 49
    LESSEQUAL     shift, and go to state 50
    GREATEREQUAL  shift, and go to state 51
    LESS          shift, and go to state 52
    GREATER       shift, and go to state 53


State 63

   18 print_statement: PRINT expr SEMICOLON •

    $default  reduce using rule 18 (print_statement)


State 64

   17 scan_statement: SCAN expr SEMICOLON •

    $default  reduce using rule 17 (scan_statement)


State 65

   44 expr: LPAREN INT RPAREN • expr

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 87


State 66

   45 expr: LPAREN FLOAT RPAREN • expr

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 88


State 67

   46 expr: LPAREN DOUBLE RPAREN • expr

    VAR         shift, and go to state 34
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    expr  go to state 89


State 68

   47 expr: LPAREN expr RPAREN •

    $default  reduce using rule 47 (expr)


State 69

   15 stmt_list: stmt •

    $default  reduce using rule 15 (stmt_list)


State 70

   14 block_stmt: LBRACE $@1 stmt_list • RBRACE
   16 stmt_list: stmt_list • stmt

    VAR         shift, and go to state 4
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    INT         shift, and go to state 8
    FLOAT       shift, and go to state 9
    DOUBLE      shift, and go to state 10
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    PRINT       shift, and go to state 13
    SCAN        shift, and go to state 14
    LPAREN      shift, and go to state 15
    LBRACE      shift, and go to state 16
    RBRACE      shift, and go to state 90
    SEMICOLON   shift, and go to state 17
    MINUS       shift, and go to state 18

    stmt             go to state 91
    block_stmt       go to state 20
    scan_statement   go to state 21
    print_statement  go to state 22
    assignment       go to state 23
    declaration      go to state 24
    while_statement  go to state 25
    if_statement     go to state 26
    expr             go to state 27


State 71

   34 expr: expr • PLUS expr
   34     | expr PLUS expr •
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    MULTIPLY      shift, and go to state 46
    DIVIDE        shift, and go to state 47
    EQUAL         shift, and go to state 48
    NOTEQUAL      shift, and go to state 49
    LESSEQUAL     shift, and go to state 50
    GREATEREQUAL  shift, and go to state 51
    LESS          shift, and go to state 52
    GREATER       shift, and go to state 53

    $default  reduce using rule 34 (expr)


State 72

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   35     | expr MINUS expr •
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    MULTIPLY      shift, and go to state 46
    DIVIDE        shift, and go to state 47
    EQUAL         shift, and go to state 48
    NOTEQUAL      shift, and go to state 49
    LESSEQUAL     shift, and go to state 50
    GREATEREQUAL  shift, and go to state 51
    LESS          shift, and go to state 52
    GREATER       shift, and go to state 53

    $default  reduce using rule 35 (expr)


State 73

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   36     | expr MULTIPLY expr •
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    EQUAL         shift, and go to state 48
    NOTEQUAL      shift, and go to state 49
    LESSEQUAL     shift, and go to state 50
    GREATEREQUAL  shift, and go to state 51
    LESS          shift, and go to state 52
    GREATER       shift, and go to state 53

    $default  reduce using rule 36 (expr)


State 74

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   37     | expr DIVIDE expr •
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    EQUAL         shift, and go to state 48
    NOTEQUAL      shift, and go to state 49
    LESSEQUAL     shift, and go to state 50
    GREATEREQUAL  shift, and go to state 51
    LESS          shift, and go to state 52
    GREATER       shift, and go to state 53

    $default  reduce using rule 37 (expr)


State 75

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr
   43     | expr EQUAL expr •

    $default  reduce using rule 43 (expr)


State 76

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   42     | expr NOTEQUAL expr •
   43     | expr • EQUAL expr

    $default  reduce using rule 42 (expr)


State 77

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   41     | expr LESSEQUAL expr •
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    $default  reduce using rule 41 (expr)


State 78

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   40     | expr GREATEREQUAL expr •
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    $default  reduce using rule 40 (expr)


State 79

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   38     | expr LESS expr •
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    $default  reduce using rule 38 (expr)


State 80

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   39     | expr GREATER expr •
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    $default  reduce using rule 39 (expr)


State 81

   19 assignment: VAR ASSIGN expr SEMICOLON •

    $default  reduce using rule 19 (assignment)


State 82

   20 declaration: INT VAR ASSIGN expr • SEMICOLON
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    SEMICOLON     shift, and go to state 92
    PLUS          shift, and go to state 44
    MINUS         shift, and go to state 45
    MULTIPLY      shift, and go to state 46
    DIVIDE        shift, and go to state 47
    EQUAL         shift, and go to state 48
    NOTEQUAL      shift, and go to state 49
    LESSEQUAL     shift, and go to state 50
    GREATEREQUAL  shift, and go to state 51
    LESS          shift, and go to state 52
    GREATER       shift, and go to state 53


State 83

   21 declaration: FLOAT VAR ASSIGN expr • SEMICOLON
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    SEMICOLON     shift, and go to state 93
    PLUS          shift, and go to state 44
    MINUS         shift, and go to state 45
    MULTIPLY      shift, and go to state 46
    DIVIDE        shift, and go to state 47
    EQUAL         shift, and go to state 48
    NOTEQUAL      shift, and go to state 49
    LESSEQUAL     shift, and go to state 50
    GREATEREQUAL  shift, and go to state 51
    LESS          shift, and go to state 52
    GREATER       shift, and go to state 53


State 84

   22 declaration: DOUBLE VAR ASSIGN expr • SEMICOLON
   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr

    SEMICOLON     shift, and go to state 94
    PLUS          shift, and go to state 44
    MINUS         shift, and go to state 45
    MULTIPLY      shift, and go to state 46
    DIVIDE        shift, and go to state 47
    EQUAL         shift, and go to state 48
    NOTEQUAL      shift, and go to state 49
    LESSEQUAL     shift, and go to state 50
    GREATEREQUAL  shift, and go to state 51
    LESS          shift, and go to state 52
    GREATER       shift, and go to state 53


State 85

   27 if_statement: IF LPAREN expr RPAREN • stmt
   28             | IF LPAREN expr RPAREN • stmt ELSE stmt

    VAR         shift, and go to state 4
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    INT         shift, and go to state 8
    FLOAT       shift, and go to state 9
    DOUBLE      shift, and go to state 10
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    PRINT       shift, and go to state 13
    SCAN        shift, and go to state 14
    LPAREN      shift, and go to state 15
    LBRACE      shift, and go to state 16
    SEMICOLON   shift, and go to state 17
    MINUS       shift, and go to state 18

    stmt             go to state 95
    block_stmt       go to state 20
    scan_statement   go to state 21
    print_statement  go to state 22
    assignment       go to state 23
    declaration      go to state 24
    while_statement  go to state 25
    if_statement     go to state 26
    expr             go to state 27


State 86

   26 while_statement: WHILE LPAREN expr RPAREN • stmt

    VAR         shift, and go to state 4
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    INT         shift, and go to state 8
    FLOAT       shift, and go to state 9
    DOUBLE      shift, and go to state 10
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    PRINT       shift, and go to state 13
    SCAN        shift, and go to state 14
    LPAREN      shift, and go to state 15
    LBRACE      shift, and go to state 16
    SEMICOLON   shift, and go to state 17
    MINUS       shift, and go to state 18

    stmt             go to state 96
    block_stmt       go to state 20
    scan_statement   go to state 21
    print_statement  go to state 22
    assignment       go to state 23
    declaration      go to state 24
    while_statement  go to state 25
    if_statement     go to state 26
    expr             go to state 27


State 87

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr
   44     | LPAREN INT RPAREN expr •

    $default  reduce using rule 44 (expr)


State 88

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr
   45     | LPAREN FLOAT RPAREN expr •

    $default  reduce using rule 45 (expr)


State 89

   34 expr: expr • PLUS expr
   35     | expr • MINUS expr
   36     | expr • MULTIPLY expr
   37     | expr • DIVIDE expr
   38     | expr • LESS expr
   39     | expr • GREATER expr
   40     | expr • GREATEREQUAL expr
   41     | expr • LESSEQUAL expr
   42     | expr • NOTEQUAL expr
   43     | expr • EQUAL expr
   46     | LPAREN DOUBLE RPAREN expr •

    $default  reduce using rule 46 (expr)


State 90

   14 block_stmt: LBRACE $@1 stmt_list RBRACE •

    $default  reduce using rule 14 (block_stmt)


State 91

   16 stmt_list: stmt_list stmt •

    $default  reduce using rule 16 (stmt_list)


State 92

   20 declaration: INT VAR ASSIGN expr SEMICOLON •

    $default  reduce using rule 20 (declaration)


State 93

   21 declaration: FLOAT VAR ASSIGN expr SEMICOLON •

    $default  reduce using rule 21 (declaration)


State 94

   22 declaration: DOUBLE VAR ASSIGN expr SEMICOLON •

    $default  reduce using rule 22 (declaration)


State 95

   27 if_statement: IF LPAREN expr RPAREN stmt •
   28             | IF LPAREN expr RPAREN stmt • ELSE stmt

    ELSE  shift, and go to state 97

    $default  reduce using rule 27 (if_statement)


State 96

   26 while_statement: WHILE LPAREN expr RPAREN stmt •

    $default  reduce using rule 26 (while_statement)


State 97

   28 if_statement: IF LPAREN expr RPAREN stmt ELSE • stmt

    VAR         shift, and go to state 4
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    INT         shift, and go to state 8
    FLOAT       shift, and go to state 9
    DOUBLE      shift, and go to state 10
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    PRINT       shift, and go to state 13
    SCAN        shift, and go to state 14
    LPAREN      shift, and go to state 15
    LBRACE      shift, and go to state 16
    SEMICOLON   shift, and go to state 17
    MINUS       shift, and go to state 18

    stmt             go to state 98
    block_stmt       go to state 20
    scan_statement   go to state 21
    print_statement  go to state 22
    assignment       go to state 23
    declaration      go to state 24
    while_statement  go to state 25
    if_statement     go to state 26
    expr             go to state 27


State 98

   28 if_statement: IF LPAREN expr RPAREN stmt ELSE stmt •

    $default  reduce using rule 28 (if_statement)
