Terminals unused in grammar

    MODULO
    FUNCTION


Grammar

    0 $accept: program $end

    1 program: function

    2 function: function stmt
    3         | ε

    4 function_call: VAR LPAREN expr_list RPAREN

    5 expr_list: expr
    6          | expr_list COMMA expr

    7 type: INT
    8     | FLOAT
    9     | DOUBLE

   10 stmt: SEMICOLON
   11     | expr SEMICOLON
   12     | print_statement
   13     | scan_statement
   14     | declaration
   15     | assignment
   16     | while_statement
   17     | if_statement
   18     | block_stmt

   19 $@1: ε

   20 block_stmt: LBRACE $@1 stmt_list RBRACE

   21 stmt_list: stmt
   22          | stmt_list stmt

   23 scan_statement: SCAN expr SEMICOLON

   24 print_statement: PRINT expr SEMICOLON

   25 assignment: VAR ASSIGN expr SEMICOLON

   26 declaration: INT VAR ASSIGN expr SEMICOLON
   27            | FLOAT VAR ASSIGN expr SEMICOLON
   28            | DOUBLE VAR ASSIGN expr SEMICOLON
   29            | INT VAR SEMICOLON
   30            | FLOAT VAR SEMICOLON
   31            | DOUBLE VAR SEMICOLON
   32            | function_declaration

   33 function_declaration: INT VAR LPAREN parameter_list RPAREN block_stmt_func
   34                     | FLOAT VAR LPAREN parameter_list RPAREN block_stmt_func
   35                     | DOUBLE VAR LPAREN parameter_list RPAREN block_stmt_func
   36                     | INT VAR LPAREN RPAREN block_stmt_func
   37                     | FLOAT VAR LPAREN RPAREN block_stmt_func
   38                     | DOUBLE VAR LPAREN RPAREN block_stmt_func

   39 block_stmt_func: LBRACE RETURN expr SEMICOLON RBRACE

   40 parameter_list: type VAR
   41               | parameter_list COMMA type VAR

   42 while_statement: WHILE LPAREN expr RPAREN stmt

   43 if_statement: IF LPAREN expr RPAREN stmt
   44             | IF LPAREN expr RPAREN stmt ELSE stmt

   45 expr: function_call
   46     | INT_VAL
   47     | FLOAT_VAL
   48     | DOUBLE_VAL
   49     | VAR
   50     | MINUS expr
   51     | expr PLUS expr
   52     | expr MINUS expr
   53     | expr MULTIPLY expr
   54     | expr DIVIDE expr
   55     | expr LESS expr
   56     | expr GREATER expr
   57     | expr GREATEREQUAL expr
   58     | expr LESSEQUAL expr
   59     | expr NOTEQUAL expr
   60     | expr EQUAL expr
   61     | LPAREN INT RPAREN expr
   62     | LPAREN FLOAT RPAREN expr
   63     | LPAREN DOUBLE RPAREN expr
   64     | LPAREN expr RPAREN


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    VAR <sval> (258) 4 25 26 27 28 29 30 31 33 34 35 36 37 38 40 41 49
    INT_VAL <iVal> (259) 46
    FLOAT_VAL <fVal> (260) 47
    DOUBLE_VAL <dVal> (261) 48
    INT (262) 7 26 29 33 36 61
    FLOAT (263) 8 27 30 34 37 62
    DOUBLE (264) 9 28 31 35 38 63
    IF (265) 43 44
    WHILE (266) 42
    PRINT (267) 24
    SCAN (268) 23
    RETURN (269) 39
    LPAREN (270) 4 33 34 35 36 37 38 42 43 44 61 62 63 64
    RPAREN (271) 4 33 34 35 36 37 38 42 43 44 61 62 63 64
    LBRACE (272) 20 39
    RBRACE (273) 20 39
    COMMA (274) 6 41
    SEMICOLON (275) 10 11 23 24 25 26 27 28 29 30 31 39
    ASSIGN (276) 25 26 27 28
    MODULO (277)
    IFX (278)
    ELSE (279) 44
    PLUS (280) 51
    MINUS (281) 50 52
    MULTIPLY (282) 53
    DIVIDE (283) 54
    EQUAL (284) 60
    NOTEQUAL (285) 59
    LESSEQUAL (286) 58
    GREATEREQUAL (287) 57
    LESS (288) 55
    GREATER (289) 56
    UMINUS (290)
    FUNCTION (291)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program (38)
        on left: 1
        on right: 0
    function (39)
        on left: 2 3
        on right: 1 2
    function_call <node> (40)
        on left: 4
        on right: 45
    expr_list <node> (41)
        on left: 5 6
        on right: 4 6
    type <iVal> (42)
        on left: 7 8 9
        on right: 40 41
    stmt <node> (43)
        on left: 10 11 12 13 14 15 16 17 18
        on right: 2 21 22 42 43 44
    block_stmt <node> (44)
        on left: 20
        on right: 18
    $@1 (45)
        on left: 19
        on right: 20
    stmt_list <node> (46)
        on left: 21 22
        on right: 20 22
    scan_statement <node> (47)
        on left: 23
        on right: 13
    print_statement <node> (48)
        on left: 24
        on right: 12
    assignment <node> (49)
        on left: 25
        on right: 15
    declaration <node> (50)
        on left: 26 27 28 29 30 31 32
        on right: 14
    function_declaration <node> (51)
        on left: 33 34 35 36 37 38
        on right: 32
    block_stmt_func <node> (52)
        on left: 39
        on right: 33 34 35 36 37 38
    parameter_list <node> (53)
        on left: 40 41
        on right: 33 34 35 41
    while_statement <node> (54)
        on left: 42
        on right: 16
    if_statement <node> (55)
        on left: 43 44
        on right: 17
    expr <node> (56)
        on left: 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64
        on right: 5 6 11 23 24 25 26 27 28 39 42 43 44 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64


State 0

    0 $accept: • program $end

    $default  reduce using rule 3 (function)

    program   go to state 1
    function  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: function •
    2 function: function • stmt

    VAR         shift, and go to state 4
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    INT         shift, and go to state 8
    FLOAT       shift, and go to state 9
    DOUBLE      shift, and go to state 10
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    PRINT       shift, and go to state 13
    SCAN        shift, and go to state 14
    LPAREN      shift, and go to state 15
    LBRACE      shift, and go to state 16
    SEMICOLON   shift, and go to state 17
    MINUS       shift, and go to state 18

    $default  reduce using rule 1 (program)

    function_call         go to state 19
    stmt                  go to state 20
    block_stmt            go to state 21
    scan_statement        go to state 22
    print_statement       go to state 23
    assignment            go to state 24
    declaration           go to state 25
    function_declaration  go to state 26
    while_statement       go to state 27
    if_statement          go to state 28
    expr                  go to state 29


State 3

    0 $accept: program $end •

    $default  accept


State 4

    4 function_call: VAR • LPAREN expr_list RPAREN
   25 assignment: VAR • ASSIGN expr SEMICOLON
   49 expr: VAR •

    LPAREN  shift, and go to state 30
    ASSIGN  shift, and go to state 31

    $default  reduce using rule 49 (expr)


State 5

   46 expr: INT_VAL •

    $default  reduce using rule 46 (expr)


State 6

   47 expr: FLOAT_VAL •

    $default  reduce using rule 47 (expr)


State 7

   48 expr: DOUBLE_VAL •

    $default  reduce using rule 48 (expr)


State 8

   26 declaration: INT • VAR ASSIGN expr SEMICOLON
   29            | INT • VAR SEMICOLON
   33 function_declaration: INT • VAR LPAREN parameter_list RPAREN block_stmt_func
   36                     | INT • VAR LPAREN RPAREN block_stmt_func

    VAR  shift, and go to state 32


State 9

   27 declaration: FLOAT • VAR ASSIGN expr SEMICOLON
   30            | FLOAT • VAR SEMICOLON
   34 function_declaration: FLOAT • VAR LPAREN parameter_list RPAREN block_stmt_func
   37                     | FLOAT • VAR LPAREN RPAREN block_stmt_func

    VAR  shift, and go to state 33


State 10

   28 declaration: DOUBLE • VAR ASSIGN expr SEMICOLON
   31            | DOUBLE • VAR SEMICOLON
   35 function_declaration: DOUBLE • VAR LPAREN parameter_list RPAREN block_stmt_func
   38                     | DOUBLE • VAR LPAREN RPAREN block_stmt_func

    VAR  shift, and go to state 34


State 11

   43 if_statement: IF • LPAREN expr RPAREN stmt
   44             | IF • LPAREN expr RPAREN stmt ELSE stmt

    LPAREN  shift, and go to state 35


State 12

   42 while_statement: WHILE • LPAREN expr RPAREN stmt

    LPAREN  shift, and go to state 36


State 13

   24 print_statement: PRINT • expr SEMICOLON

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 38


State 14

   23 scan_statement: SCAN • expr SEMICOLON

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 39


State 15

   61 expr: LPAREN • INT RPAREN expr
   62     | LPAREN • FLOAT RPAREN expr
   63     | LPAREN • DOUBLE RPAREN expr
   64     | LPAREN • expr RPAREN

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    INT         shift, and go to state 40
    FLOAT       shift, and go to state 41
    DOUBLE      shift, and go to state 42
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 43


State 16

   20 block_stmt: LBRACE • $@1 stmt_list RBRACE

    $default  reduce using rule 19 ($@1)

    $@1  go to state 44


State 17

   10 stmt: SEMICOLON •

    $default  reduce using rule 10 (stmt)


State 18

   50 expr: MINUS • expr

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 45


State 19

   45 expr: function_call •

    $default  reduce using rule 45 (expr)


State 20

    2 function: function stmt •

    $default  reduce using rule 2 (function)


State 21

   18 stmt: block_stmt •

    $default  reduce using rule 18 (stmt)


State 22

   13 stmt: scan_statement •

    $default  reduce using rule 13 (stmt)


State 23

   12 stmt: print_statement •

    $default  reduce using rule 12 (stmt)


State 24

   15 stmt: assignment •

    $default  reduce using rule 15 (stmt)


State 25

   14 stmt: declaration •

    $default  reduce using rule 14 (stmt)


State 26

   32 declaration: function_declaration •

    $default  reduce using rule 32 (declaration)


State 27

   16 stmt: while_statement •

    $default  reduce using rule 16 (stmt)


State 28

   17 stmt: if_statement •

    $default  reduce using rule 17 (stmt)


State 29

   11 stmt: expr • SEMICOLON
   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    SEMICOLON     shift, and go to state 46
    PLUS          shift, and go to state 47
    MINUS         shift, and go to state 48
    MULTIPLY      shift, and go to state 49
    DIVIDE        shift, and go to state 50
    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56


State 30

    4 function_call: VAR LPAREN • expr_list RPAREN

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr_list      go to state 57
    expr           go to state 58


State 31

   25 assignment: VAR ASSIGN • expr SEMICOLON

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 59


State 32

   26 declaration: INT VAR • ASSIGN expr SEMICOLON
   29            | INT VAR • SEMICOLON
   33 function_declaration: INT VAR • LPAREN parameter_list RPAREN block_stmt_func
   36                     | INT VAR • LPAREN RPAREN block_stmt_func

    LPAREN     shift, and go to state 60
    SEMICOLON  shift, and go to state 61
    ASSIGN     shift, and go to state 62


State 33

   27 declaration: FLOAT VAR • ASSIGN expr SEMICOLON
   30            | FLOAT VAR • SEMICOLON
   34 function_declaration: FLOAT VAR • LPAREN parameter_list RPAREN block_stmt_func
   37                     | FLOAT VAR • LPAREN RPAREN block_stmt_func

    LPAREN     shift, and go to state 63
    SEMICOLON  shift, and go to state 64
    ASSIGN     shift, and go to state 65


State 34

   28 declaration: DOUBLE VAR • ASSIGN expr SEMICOLON
   31            | DOUBLE VAR • SEMICOLON
   35 function_declaration: DOUBLE VAR • LPAREN parameter_list RPAREN block_stmt_func
   38                     | DOUBLE VAR • LPAREN RPAREN block_stmt_func

    LPAREN     shift, and go to state 66
    SEMICOLON  shift, and go to state 67
    ASSIGN     shift, and go to state 68


State 35

   43 if_statement: IF LPAREN • expr RPAREN stmt
   44             | IF LPAREN • expr RPAREN stmt ELSE stmt

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 69


State 36

   42 while_statement: WHILE LPAREN • expr RPAREN stmt

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 70


State 37

    4 function_call: VAR • LPAREN expr_list RPAREN
   49 expr: VAR •

    LPAREN  shift, and go to state 30

    $default  reduce using rule 49 (expr)


State 38

   24 print_statement: PRINT expr • SEMICOLON
   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    SEMICOLON     shift, and go to state 71
    PLUS          shift, and go to state 47
    MINUS         shift, and go to state 48
    MULTIPLY      shift, and go to state 49
    DIVIDE        shift, and go to state 50
    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56


State 39

   23 scan_statement: SCAN expr • SEMICOLON
   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    SEMICOLON     shift, and go to state 72
    PLUS          shift, and go to state 47
    MINUS         shift, and go to state 48
    MULTIPLY      shift, and go to state 49
    DIVIDE        shift, and go to state 50
    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56


State 40

   61 expr: LPAREN INT • RPAREN expr

    RPAREN  shift, and go to state 73


State 41

   62 expr: LPAREN FLOAT • RPAREN expr

    RPAREN  shift, and go to state 74


State 42

   63 expr: LPAREN DOUBLE • RPAREN expr

    RPAREN  shift, and go to state 75


State 43

   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr
   64     | LPAREN expr • RPAREN

    RPAREN        shift, and go to state 76
    PLUS          shift, and go to state 47
    MINUS         shift, and go to state 48
    MULTIPLY      shift, and go to state 49
    DIVIDE        shift, and go to state 50
    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56


State 44

   20 block_stmt: LBRACE $@1 • stmt_list RBRACE

    VAR         shift, and go to state 4
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    INT         shift, and go to state 8
    FLOAT       shift, and go to state 9
    DOUBLE      shift, and go to state 10
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    PRINT       shift, and go to state 13
    SCAN        shift, and go to state 14
    LPAREN      shift, and go to state 15
    LBRACE      shift, and go to state 16
    SEMICOLON   shift, and go to state 17
    MINUS       shift, and go to state 18

    function_call         go to state 19
    stmt                  go to state 77
    block_stmt            go to state 21
    stmt_list             go to state 78
    scan_statement        go to state 22
    print_statement       go to state 23
    assignment            go to state 24
    declaration           go to state 25
    function_declaration  go to state 26
    while_statement       go to state 27
    if_statement          go to state 28
    expr                  go to state 29


State 45

   50 expr: MINUS expr •
   51     | expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    $default  reduce using rule 50 (expr)


State 46

   11 stmt: expr SEMICOLON •

    $default  reduce using rule 11 (stmt)


State 47

   51 expr: expr PLUS • expr

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 79


State 48

   52 expr: expr MINUS • expr

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 80


State 49

   53 expr: expr MULTIPLY • expr

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 81


State 50

   54 expr: expr DIVIDE • expr

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 82


State 51

   60 expr: expr EQUAL • expr

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 83


State 52

   59 expr: expr NOTEQUAL • expr

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 84


State 53

   58 expr: expr LESSEQUAL • expr

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 85


State 54

   57 expr: expr GREATEREQUAL • expr

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 86


State 55

   55 expr: expr LESS • expr

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 87


State 56

   56 expr: expr GREATER • expr

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 88


State 57

    4 function_call: VAR LPAREN expr_list • RPAREN
    6 expr_list: expr_list • COMMA expr

    RPAREN  shift, and go to state 89
    COMMA   shift, and go to state 90


State 58

    5 expr_list: expr •
   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    PLUS          shift, and go to state 47
    MINUS         shift, and go to state 48
    MULTIPLY      shift, and go to state 49
    DIVIDE        shift, and go to state 50
    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56

    $default  reduce using rule 5 (expr_list)


State 59

   25 assignment: VAR ASSIGN expr • SEMICOLON
   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    SEMICOLON     shift, and go to state 91
    PLUS          shift, and go to state 47
    MINUS         shift, and go to state 48
    MULTIPLY      shift, and go to state 49
    DIVIDE        shift, and go to state 50
    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56


State 60

   33 function_declaration: INT VAR LPAREN • parameter_list RPAREN block_stmt_func
   36                     | INT VAR LPAREN • RPAREN block_stmt_func

    INT     shift, and go to state 92
    FLOAT   shift, and go to state 93
    DOUBLE  shift, and go to state 94
    RPAREN  shift, and go to state 95

    type            go to state 96
    parameter_list  go to state 97


State 61

   29 declaration: INT VAR SEMICOLON •

    $default  reduce using rule 29 (declaration)


State 62

   26 declaration: INT VAR ASSIGN • expr SEMICOLON

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 98


State 63

   34 function_declaration: FLOAT VAR LPAREN • parameter_list RPAREN block_stmt_func
   37                     | FLOAT VAR LPAREN • RPAREN block_stmt_func

    INT     shift, and go to state 92
    FLOAT   shift, and go to state 93
    DOUBLE  shift, and go to state 94
    RPAREN  shift, and go to state 99

    type            go to state 96
    parameter_list  go to state 100


State 64

   30 declaration: FLOAT VAR SEMICOLON •

    $default  reduce using rule 30 (declaration)


State 65

   27 declaration: FLOAT VAR ASSIGN • expr SEMICOLON

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 101


State 66

   35 function_declaration: DOUBLE VAR LPAREN • parameter_list RPAREN block_stmt_func
   38                     | DOUBLE VAR LPAREN • RPAREN block_stmt_func

    INT     shift, and go to state 92
    FLOAT   shift, and go to state 93
    DOUBLE  shift, and go to state 94
    RPAREN  shift, and go to state 102

    type            go to state 96
    parameter_list  go to state 103


State 67

   31 declaration: DOUBLE VAR SEMICOLON •

    $default  reduce using rule 31 (declaration)


State 68

   28 declaration: DOUBLE VAR ASSIGN • expr SEMICOLON

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 104


State 69

   43 if_statement: IF LPAREN expr • RPAREN stmt
   44             | IF LPAREN expr • RPAREN stmt ELSE stmt
   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    RPAREN        shift, and go to state 105
    PLUS          shift, and go to state 47
    MINUS         shift, and go to state 48
    MULTIPLY      shift, and go to state 49
    DIVIDE        shift, and go to state 50
    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56


State 70

   42 while_statement: WHILE LPAREN expr • RPAREN stmt
   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    RPAREN        shift, and go to state 106
    PLUS          shift, and go to state 47
    MINUS         shift, and go to state 48
    MULTIPLY      shift, and go to state 49
    DIVIDE        shift, and go to state 50
    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56


State 71

   24 print_statement: PRINT expr SEMICOLON •

    $default  reduce using rule 24 (print_statement)


State 72

   23 scan_statement: SCAN expr SEMICOLON •

    $default  reduce using rule 23 (scan_statement)


State 73

   61 expr: LPAREN INT RPAREN • expr

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 107


State 74

   62 expr: LPAREN FLOAT RPAREN • expr

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 108


State 75

   63 expr: LPAREN DOUBLE RPAREN • expr

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 109


State 76

   64 expr: LPAREN expr RPAREN •

    $default  reduce using rule 64 (expr)


State 77

   21 stmt_list: stmt •

    $default  reduce using rule 21 (stmt_list)


State 78

   20 block_stmt: LBRACE $@1 stmt_list • RBRACE
   22 stmt_list: stmt_list • stmt

    VAR         shift, and go to state 4
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    INT         shift, and go to state 8
    FLOAT       shift, and go to state 9
    DOUBLE      shift, and go to state 10
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    PRINT       shift, and go to state 13
    SCAN        shift, and go to state 14
    LPAREN      shift, and go to state 15
    LBRACE      shift, and go to state 16
    RBRACE      shift, and go to state 110
    SEMICOLON   shift, and go to state 17
    MINUS       shift, and go to state 18

    function_call         go to state 19
    stmt                  go to state 111
    block_stmt            go to state 21
    scan_statement        go to state 22
    print_statement       go to state 23
    assignment            go to state 24
    declaration           go to state 25
    function_declaration  go to state 26
    while_statement       go to state 27
    if_statement          go to state 28
    expr                  go to state 29


State 79

   51 expr: expr • PLUS expr
   51     | expr PLUS expr •
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    MULTIPLY      shift, and go to state 49
    DIVIDE        shift, and go to state 50
    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56

    $default  reduce using rule 51 (expr)


State 80

   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   52     | expr MINUS expr •
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    MULTIPLY      shift, and go to state 49
    DIVIDE        shift, and go to state 50
    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56

    $default  reduce using rule 52 (expr)


State 81

   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   53     | expr MULTIPLY expr •
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56

    $default  reduce using rule 53 (expr)


State 82

   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   54     | expr DIVIDE expr •
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56

    $default  reduce using rule 54 (expr)


State 83

   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr
   60     | expr EQUAL expr •

    $default  reduce using rule 60 (expr)


State 84

   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   59     | expr NOTEQUAL expr •
   60     | expr • EQUAL expr

    $default  reduce using rule 59 (expr)


State 85

   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   58     | expr LESSEQUAL expr •
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    $default  reduce using rule 58 (expr)


State 86

   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   57     | expr GREATEREQUAL expr •
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    $default  reduce using rule 57 (expr)


State 87

   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   55     | expr LESS expr •
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    $default  reduce using rule 55 (expr)


State 88

   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   56     | expr GREATER expr •
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    $default  reduce using rule 56 (expr)


State 89

    4 function_call: VAR LPAREN expr_list RPAREN •

    $default  reduce using rule 4 (function_call)


State 90

    6 expr_list: expr_list COMMA • expr

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 112


State 91

   25 assignment: VAR ASSIGN expr SEMICOLON •

    $default  reduce using rule 25 (assignment)


State 92

    7 type: INT •

    $default  reduce using rule 7 (type)


State 93

    8 type: FLOAT •

    $default  reduce using rule 8 (type)


State 94

    9 type: DOUBLE •

    $default  reduce using rule 9 (type)


State 95

   36 function_declaration: INT VAR LPAREN RPAREN • block_stmt_func

    LBRACE  shift, and go to state 113

    block_stmt_func  go to state 114


State 96

   40 parameter_list: type • VAR

    VAR  shift, and go to state 115


State 97

   33 function_declaration: INT VAR LPAREN parameter_list • RPAREN block_stmt_func
   41 parameter_list: parameter_list • COMMA type VAR

    RPAREN  shift, and go to state 116
    COMMA   shift, and go to state 117


State 98

   26 declaration: INT VAR ASSIGN expr • SEMICOLON
   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    SEMICOLON     shift, and go to state 118
    PLUS          shift, and go to state 47
    MINUS         shift, and go to state 48
    MULTIPLY      shift, and go to state 49
    DIVIDE        shift, and go to state 50
    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56


State 99

   37 function_declaration: FLOAT VAR LPAREN RPAREN • block_stmt_func

    LBRACE  shift, and go to state 113

    block_stmt_func  go to state 119


State 100

   34 function_declaration: FLOAT VAR LPAREN parameter_list • RPAREN block_stmt_func
   41 parameter_list: parameter_list • COMMA type VAR

    RPAREN  shift, and go to state 120
    COMMA   shift, and go to state 117


State 101

   27 declaration: FLOAT VAR ASSIGN expr • SEMICOLON
   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    SEMICOLON     shift, and go to state 121
    PLUS          shift, and go to state 47
    MINUS         shift, and go to state 48
    MULTIPLY      shift, and go to state 49
    DIVIDE        shift, and go to state 50
    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56


State 102

   38 function_declaration: DOUBLE VAR LPAREN RPAREN • block_stmt_func

    LBRACE  shift, and go to state 113

    block_stmt_func  go to state 122


State 103

   35 function_declaration: DOUBLE VAR LPAREN parameter_list • RPAREN block_stmt_func
   41 parameter_list: parameter_list • COMMA type VAR

    RPAREN  shift, and go to state 123
    COMMA   shift, and go to state 117


State 104

   28 declaration: DOUBLE VAR ASSIGN expr • SEMICOLON
   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    SEMICOLON     shift, and go to state 124
    PLUS          shift, and go to state 47
    MINUS         shift, and go to state 48
    MULTIPLY      shift, and go to state 49
    DIVIDE        shift, and go to state 50
    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56


State 105

   43 if_statement: IF LPAREN expr RPAREN • stmt
   44             | IF LPAREN expr RPAREN • stmt ELSE stmt

    VAR         shift, and go to state 4
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    INT         shift, and go to state 8
    FLOAT       shift, and go to state 9
    DOUBLE      shift, and go to state 10
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    PRINT       shift, and go to state 13
    SCAN        shift, and go to state 14
    LPAREN      shift, and go to state 15
    LBRACE      shift, and go to state 16
    SEMICOLON   shift, and go to state 17
    MINUS       shift, and go to state 18

    function_call         go to state 19
    stmt                  go to state 125
    block_stmt            go to state 21
    scan_statement        go to state 22
    print_statement       go to state 23
    assignment            go to state 24
    declaration           go to state 25
    function_declaration  go to state 26
    while_statement       go to state 27
    if_statement          go to state 28
    expr                  go to state 29


State 106

   42 while_statement: WHILE LPAREN expr RPAREN • stmt

    VAR         shift, and go to state 4
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    INT         shift, and go to state 8
    FLOAT       shift, and go to state 9
    DOUBLE      shift, and go to state 10
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    PRINT       shift, and go to state 13
    SCAN        shift, and go to state 14
    LPAREN      shift, and go to state 15
    LBRACE      shift, and go to state 16
    SEMICOLON   shift, and go to state 17
    MINUS       shift, and go to state 18

    function_call         go to state 19
    stmt                  go to state 126
    block_stmt            go to state 21
    scan_statement        go to state 22
    print_statement       go to state 23
    assignment            go to state 24
    declaration           go to state 25
    function_declaration  go to state 26
    while_statement       go to state 27
    if_statement          go to state 28
    expr                  go to state 29


State 107

   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr
   61     | LPAREN INT RPAREN expr •

    $default  reduce using rule 61 (expr)


State 108

   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr
   62     | LPAREN FLOAT RPAREN expr •

    $default  reduce using rule 62 (expr)


State 109

   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr
   63     | LPAREN DOUBLE RPAREN expr •

    $default  reduce using rule 63 (expr)


State 110

   20 block_stmt: LBRACE $@1 stmt_list RBRACE •

    $default  reduce using rule 20 (block_stmt)


State 111

   22 stmt_list: stmt_list stmt •

    $default  reduce using rule 22 (stmt_list)


State 112

    6 expr_list: expr_list COMMA expr •
   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    PLUS          shift, and go to state 47
    MINUS         shift, and go to state 48
    MULTIPLY      shift, and go to state 49
    DIVIDE        shift, and go to state 50
    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56

    $default  reduce using rule 6 (expr_list)


State 113

   39 block_stmt_func: LBRACE • RETURN expr SEMICOLON RBRACE

    RETURN  shift, and go to state 127


State 114

   36 function_declaration: INT VAR LPAREN RPAREN block_stmt_func •

    $default  reduce using rule 36 (function_declaration)


State 115

   40 parameter_list: type VAR •

    $default  reduce using rule 40 (parameter_list)


State 116

   33 function_declaration: INT VAR LPAREN parameter_list RPAREN • block_stmt_func

    LBRACE  shift, and go to state 113

    block_stmt_func  go to state 128


State 117

   41 parameter_list: parameter_list COMMA • type VAR

    INT     shift, and go to state 92
    FLOAT   shift, and go to state 93
    DOUBLE  shift, and go to state 94

    type  go to state 129


State 118

   26 declaration: INT VAR ASSIGN expr SEMICOLON •

    $default  reduce using rule 26 (declaration)


State 119

   37 function_declaration: FLOAT VAR LPAREN RPAREN block_stmt_func •

    $default  reduce using rule 37 (function_declaration)


State 120

   34 function_declaration: FLOAT VAR LPAREN parameter_list RPAREN • block_stmt_func

    LBRACE  shift, and go to state 113

    block_stmt_func  go to state 130


State 121

   27 declaration: FLOAT VAR ASSIGN expr SEMICOLON •

    $default  reduce using rule 27 (declaration)


State 122

   38 function_declaration: DOUBLE VAR LPAREN RPAREN block_stmt_func •

    $default  reduce using rule 38 (function_declaration)


State 123

   35 function_declaration: DOUBLE VAR LPAREN parameter_list RPAREN • block_stmt_func

    LBRACE  shift, and go to state 113

    block_stmt_func  go to state 131


State 124

   28 declaration: DOUBLE VAR ASSIGN expr SEMICOLON •

    $default  reduce using rule 28 (declaration)


State 125

   43 if_statement: IF LPAREN expr RPAREN stmt •
   44             | IF LPAREN expr RPAREN stmt • ELSE stmt

    ELSE  shift, and go to state 132

    $default  reduce using rule 43 (if_statement)


State 126

   42 while_statement: WHILE LPAREN expr RPAREN stmt •

    $default  reduce using rule 42 (while_statement)


State 127

   39 block_stmt_func: LBRACE RETURN • expr SEMICOLON RBRACE

    VAR         shift, and go to state 37
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    LPAREN      shift, and go to state 15
    MINUS       shift, and go to state 18

    function_call  go to state 19
    expr           go to state 133


State 128

   33 function_declaration: INT VAR LPAREN parameter_list RPAREN block_stmt_func •

    $default  reduce using rule 33 (function_declaration)


State 129

   41 parameter_list: parameter_list COMMA type • VAR

    VAR  shift, and go to state 134


State 130

   34 function_declaration: FLOAT VAR LPAREN parameter_list RPAREN block_stmt_func •

    $default  reduce using rule 34 (function_declaration)


State 131

   35 function_declaration: DOUBLE VAR LPAREN parameter_list RPAREN block_stmt_func •

    $default  reduce using rule 35 (function_declaration)


State 132

   44 if_statement: IF LPAREN expr RPAREN stmt ELSE • stmt

    VAR         shift, and go to state 4
    INT_VAL     shift, and go to state 5
    FLOAT_VAL   shift, and go to state 6
    DOUBLE_VAL  shift, and go to state 7
    INT         shift, and go to state 8
    FLOAT       shift, and go to state 9
    DOUBLE      shift, and go to state 10
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    PRINT       shift, and go to state 13
    SCAN        shift, and go to state 14
    LPAREN      shift, and go to state 15
    LBRACE      shift, and go to state 16
    SEMICOLON   shift, and go to state 17
    MINUS       shift, and go to state 18

    function_call         go to state 19
    stmt                  go to state 135
    block_stmt            go to state 21
    scan_statement        go to state 22
    print_statement       go to state 23
    assignment            go to state 24
    declaration           go to state 25
    function_declaration  go to state 26
    while_statement       go to state 27
    if_statement          go to state 28
    expr                  go to state 29


State 133

   39 block_stmt_func: LBRACE RETURN expr • SEMICOLON RBRACE
   51 expr: expr • PLUS expr
   52     | expr • MINUS expr
   53     | expr • MULTIPLY expr
   54     | expr • DIVIDE expr
   55     | expr • LESS expr
   56     | expr • GREATER expr
   57     | expr • GREATEREQUAL expr
   58     | expr • LESSEQUAL expr
   59     | expr • NOTEQUAL expr
   60     | expr • EQUAL expr

    SEMICOLON     shift, and go to state 136
    PLUS          shift, and go to state 47
    MINUS         shift, and go to state 48
    MULTIPLY      shift, and go to state 49
    DIVIDE        shift, and go to state 50
    EQUAL         shift, and go to state 51
    NOTEQUAL      shift, and go to state 52
    LESSEQUAL     shift, and go to state 53
    GREATEREQUAL  shift, and go to state 54
    LESS          shift, and go to state 55
    GREATER       shift, and go to state 56


State 134

   41 parameter_list: parameter_list COMMA type VAR •

    $default  reduce using rule 41 (parameter_list)


State 135

   44 if_statement: IF LPAREN expr RPAREN stmt ELSE stmt •

    $default  reduce using rule 44 (if_statement)


State 136

   39 block_stmt_func: LBRACE RETURN expr SEMICOLON • RBRACE

    RBRACE  shift, and go to state 137


State 137

   39 block_stmt_func: LBRACE RETURN expr SEMICOLON RBRACE •

    $default  reduce using rule 39 (block_stmt_func)
